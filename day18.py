import sys
from typing import List


class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        rows = len(grid)
        if rows == 0:
            return 0
        cols = len(grid[0])
        if cols == 0:
            return 0
        dp = dict()
        dp[(0, 0)] = grid[0][0]

        def helper(i, j):
            if 0 <= i < rows and 0 <= j < cols:
                if (i, j) in dp:
                    return dp[(i, j)]
                else:
                    dp[(i, j)] = min(helper(i - 1, j), helper(i, j - 1)) + grid[i][j]
                    return dp[(i, j)]
            else:
                return sys.maxsize

        return helper(rows-1, cols-1)


s = Solution()
grid = [
    [5,1,0,4,0,1,1,6,7,3,9,9,4,6,8,1],
    [9,1,0,6,4,2,8,0,1,6,0,2,7,9,0,4],
    [3,2,0,3,3,3,1,3,7,3,2,1,1,2,2,0],
    [5,2,8,2,7,6,2,0,5,3,2,4,4,4,8,9],
    [7,0,5,2,4,6,7,1,1,1,2,2,6,6,4,1],
    [0,3,5,9,1,8,0,6,3,4,0,9,9,0,9,8],
    [3,4,0,7,2,8,0,4,9,4,8,5,2,5,9,4],
    [0,4,4,1,4,6,0,7,0,2,7,1,3,8,9,8],
    [2,0,7,4,0,7,0,1,1,1,9,5,6,8,9,6],
    [4,3,9,9,1,9,8,4,2,7,5,7,5,5,5,9],
    [7,4,6,9,1,8,0,4,9,9,9,7,9,8,3,4],
    [4,3,5,7,4,5,1,8,3,7,7,0,4,4,2,3],
    [8,0,2,9,8,2,5,8,4,4,7,3,5,1,9,1],
    [6,4,8,2,2,2,1,7,1,8,7,5,5,1,0,3],
    [1,2,5,0,6,0,0,0,7,7,6,4,0,5,5,8],
    [2,5,1,4,9,4,1,0,2,0,5,7,4,7,3,5],
    [9,8,7,8,8,9,8,5,9,6,9,9,2,6,0,6],
    [4,1,2,3,5,5,4,9,5,1,9,9,9,2,7,0],
    [0,6,8,0,6,9,8,7,5,7,8,9,6,8,5,0]
]
res = s.minPathSum(grid)
print(res)
